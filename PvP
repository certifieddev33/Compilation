package cert.plugin.PvP;

import java.util.HashMap;

import net.milkbowl.vault.chat.Chat;
import net.milkbowl.vault.economy.Economy;
import net.milkbowl.vault.permission.Permission;

import java.util.UUID;
import java.util.logging.Logger;

import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.permissions.PermissionAttachment;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;

public class PvP extends JavaPlugin {
	private static final Logger log = Logger.getLogger("Minecraft");
	private Economy econ;
	private Permission perms;
	private Chat chat;
	@Override
	public void onEnable() {
		new PlayerMove(this);
		new EntityChangeEvent(this);
		this.getCommand("pvp").setExecutor(new PvPCommand());
		this.getCommand("duelaccept").setExecutor(new DuelAccept());
		this.getCommand("createworld").setExecutor(new NewWorldCommand());
		this.getCommand("shop").setExecutor(new ShopCommand());
		this.getCommand("balance").setExecutor(new ShowBalance());
		this.getCommand("resetbalance").setExecutor(new EconCommand());
		this.getCommand("teleportto").setExecutor(new TeleportToWorld());
		getServer().getPluginManager().registerEvents(new InventoryClick(), this);
		getServer().getPluginManager().registerEvents(new InventoryDrag(), this);
		getServer().getPluginManager().registerEvents(new ItemDrop(), this);
		getServer().getPluginManager().registerEvents(new OnPlayerJoin(), this);
		if (!setupEconomy()) {
			log.severe(String.format("[%s] - Disabled due to no Vault dependency found!", getDescription().getName()));
            getServer().getPluginManager().disablePlugin(this);
            return;
        }
        this.setupPermissions();
	}
	@Override
	public void onDisable() {
		
	}
	private boolean setupEconomy() {
        if (getServer().getPluginManager().getPlugin("Vault") == null) {
            return false;
        }

        RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
        if (rsp == null) {
            return false;
        }
        econ = rsp.getProvider();
        return econ != null;
    }

  private boolean setupPermissions() {
        RegisteredServiceProvider<Permission> rsp = getServer().getServicesManager().getRegistration(Permission.class);
        perms = rsp.getProvider();
        return perms != null;
    }

  public Economy getEconomy() {
        return econ;
    }

  public Permission getPermissions() {
        return perms;
    }
}
